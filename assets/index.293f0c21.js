import{r as v,c as o,p as g,t as c,l as w,i as y}from"./vendor.9bf41338.js";const x=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))i(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function r(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerpolicy&&(s.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?s.credentials="include":t.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(t){if(t.ep)return;t.ep=!0;const s=r(t);fetch(t.href,s)}};x();const M=new Float32Array([1,-1,0,-1,-1,0,0,1,0]),B=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),b=new Uint16Array([0,1,2,0]);class S{constructor(e){this.viewTranslation=[0,0,5],this.zNear=.1,this.zFar=1e3,this.sampleCount=4,this.onMouseWheel=r=>{let i=this.viewTranslation[2]+=r.deltaY*.01;i=Math.max(this.zNear,Math.min(this.zFar,i)),this.viewTranslation[2]=i},this.render=()=>{v(this.modelMatrix,this.modelMatrix,c(.5)),this.updateUniformBuffer(),this.encodeCommands(),requestAnimationFrame(this.render)},this.canvas=e,this.modelMatrix=o(),this.viewMatrix=this.createViewMat(),this.projectionMatrix=this.createPerspectiveMat()}createPerspectiveMat(){const e=o(),r=this.canvas.width/this.canvas.height;return g(e,c(45),r,this.zNear,this.zFar),e}createViewMat(){const e=o();return w(e,this.viewTranslation,[0,0,0],[0,1,0]),e}resize(e,r){const i=window.devicePixelRatio||1;this.canvas.width=e,this.canvas.height=r,(e*i!==this.presentationSize[0]||r*i!==this.presentationSize[1])&&(this.projectionMatrix=this.createPerspectiveMat(),this.resizeSwapchain())}async initialize(){const e=navigator.gpu;if(!e)return console.error("No WebGPU support navigator.gpu not available!"),!1;const r=await e.requestAdapter();console.log(r.limits),this.device=await r.requestDevice(),this.queue=this.device.queue,this.canvas.style.display="block",new y(s=>{!Array.isArray(s)||this.resize(s[0].contentRect.width*window.devicePixelRatio,s[0].contentRect.height*window.devicePixelRatio)}).observe(this.canvas),this.canvas.addEventListener("wheel",this.onMouseWheel);const t=window.devicePixelRatio||1;return this.presentationSize={width:this.canvas.clientWidth*t,height:this.canvas.clientHeight*t,depthOrArrayLayers:1},this.presentationContext=this.canvas.getContext("webgpu"),this.presentationFormat=this.presentationContext.getPreferredFormat(r),this.presentationContext.configure({device:this.device,format:this.presentationFormat,size:this.presentationSize}),!0}createBuffer(e,r){try{const i=this.device.createBuffer({mappedAtCreation:!0,size:e.byteLength,usage:r}),t=i.getMappedRange();return(e instanceof Float32Array?new Float32Array(t):new Uint16Array(t)).set(e),i.unmap(),i}catch(i){console.error(i)}}updateUniformBuffer(){const e=new Float32Array([...this.modelMatrix,...this.createViewMat(),...this.projectionMatrix]);this.queue.writeBuffer(this.uniformBuffer,0,e.buffer)}async loadShader(e){const r=await fetch(e);return this.device.createShaderModule({code:await r.text()})}resizeSwapchain(){this.renderTarget!==void 0&&(this.renderTarget.destroy(),this.depthTarget.destroy());const e=window.devicePixelRatio||1;this.presentationSize={width:this.canvas.clientWidth*e,height:this.canvas.clientHeight*e,depthOrArrayLayers:1},this.presentationContext.configure({device:this.device,format:this.presentationFormat,size:this.presentationSize}),this.renderTarget=this.device.createTexture({size:this.presentationSize,sampleCount:this.sampleCount,format:this.presentationFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT}),this.renderTargetView=this.renderTarget.createView(),this.depthTarget=this.device.createTexture({size:this.presentationSize,sampleCount:this.sampleCount,format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}),this.depthTargetView=this.depthTarget.createView()}encodeCommands(){const e={view:this.presentationContext.getCurrentTexture().createView(),loadOp:"clear",storeOp:"store"};this.sampleCount>1&&(e.view=this.renderTargetView,e.resolveTarget=this.presentationContext.getCurrentTexture().createView());const r={view:this.depthTargetView,depthLoadOp:"clear",depthClearValue:1,depthStoreOp:"store",stencilLoadOp:"clear",stencilClearValue:0,stencilStoreOp:"store"},i={colorAttachments:[e],depthStencilAttachment:r};this.commandEncoder=this.device.createCommandEncoder(),this.passEncoder=this.commandEncoder.beginRenderPass(i),this.passEncoder.setPipeline(this.pipeline),this.passEncoder.setBindGroup(0,this.uniformBindGroup),this.passEncoder.setViewport(0,0,this.canvas.width,this.canvas.height,0,1),this.passEncoder.setScissorRect(0,0,this.canvas.width,this.canvas.height),this.passEncoder.setVertexBuffer(0,this.positionBuffer),this.passEncoder.setVertexBuffer(1,this.colorBuffer),this.passEncoder.setIndexBuffer(this.indexBuffer,"uint16"),this.passEncoder.drawIndexed(3,1,0,0,0),this.passEncoder.end(),this.queue.submit([this.commandEncoder.finish()])}async initializeResources(){this.positionBuffer=this.createBuffer(M,GPUBufferUsage.VERTEX),this.colorBuffer=this.createBuffer(B,GPUBufferUsage.VERTEX),this.indexBuffer=this.createBuffer(b,GPUBufferUsage.INDEX);const e=new Float32Array([...this.modelMatrix,...this.viewMatrix,...this.projectionMatrix]);this.uniformBuffer=this.createBuffer(e,GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST),this.vertexModule=await this.loadShader("./shaders/basic.vert.wgsl"),this.fragmentModule=await this.loadShader("./shaders/basic.frag.wgsl");const r={shaderLocation:0,offset:0,format:"float32x3"},i={shaderLocation:1,offset:0,format:"float32x4"},t={attributes:[r],arrayStride:4*3,stepMode:"vertex"},s={attributes:[i],arrayStride:4*4,stepMode:"vertex"},a={depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"},n=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]});this.uniformBindGroup=this.device.createBindGroup({layout:n,entries:[{binding:0,resource:{buffer:this.uniformBuffer}}]});const d={bindGroupLayouts:[n]},u=this.device.createPipelineLayout(d),l={module:this.vertexModule,entryPoint:"main",buffers:[t,s]},p={format:"bgra8unorm",blend:{alpha:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"}},writeMask:GPUColorWrite.ALL},f={module:this.fragmentModule,entryPoint:"main",targets:[p]},m={layout:u,vertex:l,fragment:f,primitive:{topology:"triangle-list",frontFace:"cw",cullMode:"none"},depthStencil:a,multisample:{count:this.sampleCount}};this.pipeline=this.device.createRenderPipeline(m)}async start(){if(await this.initialize())this.resizeSwapchain(),await this.initializeResources(),this.render();else{const e=document.getElementById("error");e.style.display="block"}}}const E=document.getElementById("webgpu_canvas"),P=new S(E);P.start();
